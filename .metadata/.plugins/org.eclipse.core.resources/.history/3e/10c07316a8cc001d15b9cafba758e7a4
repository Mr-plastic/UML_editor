import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

interface State_interface{
	 void Press_event(Canvas canvas,MouseEvent e);
	 void Drag_event(Canvas canvas,MouseEvent e);
	 void Release_event(Canvas canvas,MouseEvent e);
}

public class Canvas extends JPanel implements MouseListener, MouseMotionListener{
	public static State Now_state;
	private State[] state_group = new State[6];
	public MouseEvent press_event ;
	public MouseEvent mouse_dragg_event ;
	public MouseEvent release_event;
	public ArrayList<ConnectLine> Line_list;
	
	Canvas(){
		Line_list = new ArrayList<ConnectLine>();
		this.setBounds(80, 0, 605, 640);
		this.setLayout(null);
		this.setBackground(Color.white);
		state_group[0] = new Select_state();
		state_group[1] = new Assoc_state();
		state_group[2] = new General_state();
		state_group[3] = new Composit_state();
		state_group[4] = new Class_state();
		state_group[5] = new UseCase_state();
		this.Now_state = state_group[0];
		this.addMouseListener(this);
		this.addMouseMotionListener(this);
		
	}
	@Override
	public void paint(Graphics g) {
		super.paint(g);
		for(ConnectLine coonnectline: Line_list) {
			g.drawLine((int)coonnectline.startConnPort.getX(), (int)coonnectline.startConnPort.getY(),(int) coonnectline.endConnPort.getX(),(int)coonnectline. endConnPort.getY());
			int dx = x2 - x1, dy = y2 - y1;
			double D = Math.sqrt(dx*dx + dy*dy);
			double xm = D - diamondW, xn = xm, ym = diamondH, yn = -diamondH, x;
			double sin = dy/D, cos = dx/D;
			
			x = xm*cos - ym*sin + x1;
	        ym = xm*sin + ym*cos + y1;
	        xm = x;

	        x = xn*cos - yn*sin + x1;
	        yn = xn*sin + yn*cos + y1;
	        xn = x;
	        
	        // 分點公式算出線上的點, 三角形的三個點與這個點連線即為一個菱形
	        double xq = (diamondH*2/D)*x1 + ((D-diamondH*2)/D)*x2;
	        double yq = (diamondH*2/D)*y1 + ((D-diamondH*2)/D)*y2;
	   
	        int[] xpoints = {x2, (int) xm, (int) xq, (int) xn};
	        int[] ypoints = {y2, (int) ym, (int) yq, (int) yn};

	        g.fillPolygon(xpoints, ypoints, 4);
		}
	}
	public void setState(int s) {
		Now_state =  state_group[s];
	}
	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		 this.Now_state.Press_event(this,e);
	}
	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
	     this.Now_state.Release_event(this,e);
	}
	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub
		this.Now_state.Drag_event(this,e);
	}
	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
};

