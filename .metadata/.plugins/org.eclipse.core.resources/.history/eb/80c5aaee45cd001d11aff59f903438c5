import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;

interface Connect_Line_basic{
	void paint(Graphics g);
}
public class ConnectLine implements Connect_Line_basic{
	 protected Object startObj;
	 protected Object endObj;
	 protected Point startConnPort;
	 protected Point endConnPort;
	
    ConnectLine(Point start,Point end,Object startObj,Object endObj) {
    	startObj = startObj;
    	endObj = endObj;
    	startConnPort = start;
    	endConnPort = end;
    }
	@Override
	public void paint(Graphics g) {
		// TODO Auto-generated method stub
		
	}

}

class AssocLine extends ConnectLine{
	AssocLine(Point start,Point end,Object startObj,Object endObj) {
		super(start, end,startObj,endObj);
		// TODO Auto-generated constructor stub
	}
	@Override
	public void paint(Graphics g) {
		super.paint(g);
		
	}

}
class CompositionLine extends ConnectLine{
	private int diamondW = 10, diamondH = 10;
	protected Point start_point;
	protected Point end_point;
	CompositionLine(Point start, Point end, Object startObj, Object endObj) {
		super(start, end, startObj, endObj);
		// TODO Auto-generated constructor stub
		start_point = start;
	}
	@Override
	public void paint(Graphics g) {
		super.paint(g);
		g.drawLine(start_point.x, start_point.y, end_point.x, end_point.y);
		int dx = end_point.x - start_point.x, dy = end_point.y - start_point.y;
		double D = Math.sqrt(dx*dx + dy*dy);
		double xm = D - diamondW, xn = xm, ym = diamondH, yn = -diamondH, x;
		double sin = dy/D, cos = dx/D;
		
		x = xm*cos - ym*sin + start_point.x;
        ym = xm*sin + ym*cos + start_point.y;
        xm = x;

        x = xn*cos - yn*sin + start_point.x;
        yn = xn*sin + yn*cos + start_point.y;
        xn = x;
        
        // 分點公式算出線上的點, 三角形的三個點與這個點連線即為一個菱形
        double xq = (diamondH*2/D)*start_point.x + ((D-diamondH*2)/D)*end_point.x;
        double yq = (diamondH*2/D)*start_point.y + ((D-diamondH*2)/D)*end_point.y;
   
        int[] xpoints = {end_point.x, (int) xm, (int) xq, (int) xn};
        int[] ypoints = {end_point.y, (int) ym, (int) yq, (int) yn};

        g.fillPolygon(xpoints, ypoints, 4);
		
	}

}
class GeneralizationLine extends ConnectLine{
	GeneralizationLine(Point start, Point end, Object startObj, Object endObj) {
		super(start, end, startObj, endObj);
		// TODO Auto-generated constructor stub
	}
	@Override
	public void paint(Graphics g) {
		super.paint(g);
		
	}

}
